I"Å<h1 id="exercises">Exercises</h1>

<ul>
  <li>
    <p><strong>4.4</strong> - Counting sort</p>
  </li>
  <li>
    <p><strong>4-11</strong> Design an O(n) algorithm that, given a list of n elements, finds all the elements that appear more than n/2 times in the list. Then, design an O(n) algorithm that, given a list of n elements, finds all the elements that appear more than \(n/4\) times.
We can get the solution using something similar to tetris Game. Credits: <a href="https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/">GoG</a>.  we can solve for any n/k in O(nk) time. Here is the intuition:</p>
    <ul>
      <li>create a temp array of size k-1</li>
      <li>iterate over the elements of the array. For each element add it into temp array and increment its count</li>
      <li>when the temp array is filled and a new element comes, delete the count of each entry in the temp array and ignore the element.</li>
      <li>follow the above steps till the end.</li>
      <li>now user needs to verify for each element y in temp,  iterating over the array. to make sure each element occurs more than n/k times.</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">moreThanNdK</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// k must be greater than</span>
    <span class="c1">// 1 to get some output</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
 
    <span class="cm">/* Step 1: Create a temporary
       array (contains element
       and count) of size k-1. 
       Initialize count of all
       elements as 0 */</span>
    <span class="k">struct</span> <span class="nc">eleCount</span> <span class="n">temp</span><span class="p">[</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 
    <span class="cm">/* Step 2: Process all 
      elements of input array */</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
 
        <span class="cm">/* If arr[i] is already present in
           the element count array, 
           then increment its count
         */</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">e</span> <span class="o">==</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> 
            <span class="p">{</span>
                <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
 
        <span class="cm">/* If arr[i] is not present in temp[] */</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">l</span><span class="p">;</span>
 
            <span class="cm">/* If there is position available 
              in temp[], then place arr[i] in 
              the first available position and 
              set count as 1*/</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">l</span><span class="p">].</span><span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> 
                <span class="p">{</span>
                    <span class="n">temp</span><span class="p">[</span><span class="n">l</span><span class="p">].</span><span class="n">e</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
                    <span class="n">temp</span><span class="p">[</span><span class="n">l</span><span class="p">].</span><span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
 
            <span class="cm">/* If all the position in the 
               temp[] are filled, then decrease 
               count of every element by 1 */</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">k</span><span class="p">;</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span>
                    <span class="n">temp</span><span class="p">[</span><span class="n">l</span><span class="p">].</span><span class="n">c</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

:ET