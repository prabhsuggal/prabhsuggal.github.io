I"µ<h1 id="sorting">Sorting</h1>

<h2 id="heap-sort">Heap Sort</h2>

<p>Constructing a heap takes O(n) time. removing min/max element causes O(log n) which turn to O(nlog n) for n elements.</p>

<p><strong>Selection Sort</strong> - we partition the input array into sorted and unsorted regions. To find the smallest item, we performed a linear sweep through the unsorted portion of the array. The smallest item is then swapped with the \(ith\) item in the array before moving on to the next iteration. Selection sort performs n iterations, where the average iteration takes \(n/2\) steps, for a total of \(O(n^2)\) time.</p>

<p>Heap Sort can be seen as improved version of selection sort. We are just using a better data structure. In selection sort, swap takes \(O(1)\) time. but getting minimum item takes \(O(n)\). But we can use a data structure like priority queues/ BST which has \(O(n)\) search time which reduces time complexity to \(O(nlog n)\)</p>

<h2 id="merge-sort">Merge Sort</h2>

<p>The most important thing to remember here is that divide and conquer is your friend. Itâ€™s always useful. so keep it in mind when going through the problems. you can use it a lot of times. Not just for Sorting.</p>

<h2 id="quick-sort">Quick Sort</h2>

<p>Have read this too many times. But now comes the intuition. One thing which is important is elements less than p are in range [0, firsthigh) so firsthigh is never part of that bunch. So when we swap s[i] and s[firsthigh], we are just swaping s[i](&lt; p) with s[firsthigh](&gt;= p). also we donâ€™t include pivot element in the loop because it wonâ€™t make a change as for i=p, s[i] = s[p].</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span> <span class="cm">/* select last element as pivot */</span>
<span class="n">firsthigh</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">firsthigh</span><span class="p">]);</span>
        <span class="n">firsthigh</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">p</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="n">firsthigh</span><span class="p">]);</span>
</code></pre></div></div>

<h3 id="randomized-algorithms">Randomized Algorithms</h3>

<p>Quicksort can be improved upon by randomizing the input set. This can still give the worst case but it wonâ€™t be dependent on the input itself. Such randomization can help us in preventing worst case for a certain input.</p>

<h2 id="wiggle-sort">Wiggle Sort</h2>

<p>This can be done in O(n) time by doing a single traversal of given array. The idea is based on the fact that if we make sure that all even positioned (at index 0, 2, 4, ..) elements are greater than their adjacent odd elements, we donâ€™t need to worry about odd positioned element.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This function sorts arr[0..n-1] in wave form, i.e., arr[0] &gt;=  </span>
<span class="c1">// arr[1] &lt;= arr[2] &gt;= arr[3] &lt;= arr[4] &gt;= arr[5] .... </span>
<span class="kt">void</span> <span class="nf">sortInWave</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="c1">// Traverse all even elements </span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span> 
    <span class="p">{</span> 
        <span class="c1">// If current even element is smaller than previous </span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">)</span> 
            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span> 
  
        <span class="c1">// If current even element is smaller than next </span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> 
            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span> 
    <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

:ET