I"¾F<h1 id="chapter-3">Chapter 3</h1>

<h2 id="leetcode">LeetCode</h2>

<ul>
  <li>
    <p><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">Count of Smaller Numbers After Self</a></p>

    <p>We have to see how many numbers are smaller to self on the right.</p>

    <p><strong>Naive</strong>:
  Just interate for each element and check how many elements are smaller on the right for a given index  - <strong>\(O(n^2)\)</strong></p>

    <p><strong>Merge Sort</strong> :
  Posting an example for more <a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/discuss/76607/C++-O(nlogn)-Time-O(n)-Space-MergeSort-Solution-with-Detail-Explanation">clarity</a></p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">MergeSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">nums</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">indices</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">results</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">count</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
            <span class="n">MergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">indices</span><span class="p">,</span> <span class="n">results</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
            <span class="n">MergeSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">indices</span><span class="p">,</span> <span class="n">results</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tmp</span><span class="p">;</span>
            <span class="n">tmp</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">count</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">idx1</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">idx2</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">smallcount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">idx1</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">||</span> <span class="n">idx2</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">){</span>
                <span class="k">if</span><span class="p">((</span><span class="n">idx2</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">idx1</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span>
                        <span class="n">nums</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">idx1</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">idx2</span><span class="p">]])){</span>
                    <span class="n">tmp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="n">idx1</span><span class="p">]);</span>
                    <span class="n">results</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="n">idx1</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">smallcount</span><span class="p">;</span>
                    <span class="n">idx1</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span><span class="p">{</span>
                    <span class="n">tmp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="n">idx2</span><span class="o">++</span><span class="p">]);</span>
                    <span class="n">smallcount</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">move</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">tmp</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">indices</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">start</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">Construct Binary Tree from Preorder and Inorder Traversal</a></p>
  </li>
</ul>

<p>Two approaches:</p>

<ol>
  <li><strong>Recursive</strong>: 
  Here we keep adding preorder entries into a tree. To differentiate b/w entries which will be in left/right subtree is done on the basis of Inorder vector. Seems \(O(n^2)\) as we need to find the inorder entry idx for each preorder idx.</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">private:</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="nf">build</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">preorder</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorder</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">idx</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">){</span>
            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">TreeNode</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="n">idx</span><span class="o">++</span><span class="p">]);</span>
        <span class="kt">int</span> <span class="n">it</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">inorder</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">start</span><span class="p">,</span> <span class="n">inorder</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">preorder</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="n">inorder</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        
        <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">inorder</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">it</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
        <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">inorder</span><span class="p">,</span> <span class="n">it</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="k">public</span><span class="o">:</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">preorder</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorder</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">build</span><span class="p">(</span><span class="n">preorder</span><span class="p">,</span> <span class="n">inorder</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">inorder</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>
    <p><strong>Stack</strong> :
  This is new for me. \(O(n)\).
  Here is the initution:</p>

    <p>We know that preorder transversal is as follows:</p>

    <ul>
      <li>node</li>
      <li>node-&gt;left</li>
      <li>
        <p>node-&gt;right</p>

        <p>So we always transverse a left node in preorder until there are none left(I hope you got the pun). How do we know that there is no left subtree after a point? <strong>Answer</strong> from Inorder transversal</p>

        <p>The inorder transversal can be shown as follows:</p>
      </li>
      <li>node-&gt;left</li>
      <li>node</li>
      <li>
        <p>node-&gt;right</p>

        <p>so We store the left most node of the tree in the beginning. then the second most and the list goes on.
so what we can do is:</p>
      </li>
    </ul>

    <ol>
      <li>Make a stack of nodes with the first entry as preorder[0]</li>
      <li>Keep assuming that the next entry is a left child until the top of the stack matches the inorder[0]. this means we have reached the left mode node</li>
      <li>now pop the stack until we have s.top() == inorder[j] or s.empty().</li>
      <li>Once this is done, we can see that the left most node of the remaining tree is part of the right subtree of the node.</li>
      <li>So we will assign the next node as right child.</li>
      <li>to keep track of the right child we can keep a flag which resets after assigning the next node as right child.</li>
    </ol>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">public:</span>
<span class="n">TreeNode</span><span class="o">*</span> <span class="nf">buildTree</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">preorder</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">inorder</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">preorder</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    
    <span class="n">stack</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">st</span><span class="p">;</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">t</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">preorder</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">==</span> <span class="n">inorder</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">){</span>
                <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
                <span class="n">t</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
                <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span><span class="p">{</span>
                <span class="n">t</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">preorder</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
                <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

:ET