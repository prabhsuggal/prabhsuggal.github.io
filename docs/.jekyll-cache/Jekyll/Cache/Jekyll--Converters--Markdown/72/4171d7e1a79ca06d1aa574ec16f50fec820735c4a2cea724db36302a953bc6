I"L'<h1 id="chapter-5">Chapter 5</h1>

<h2 id="divide-and-conquer">Divide And Conquer</h2>

<p>This is one of those things which can come handy during unusual times. Binary search is a well known algorithm which has a lot of power. But sometimes it can be tricky to see all its usecases. I will discuss some of them here.</p>

<h2 id="binary-search">Binary Search</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> 
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> 
        <span class="c1">// Check if x is present at mid </span>
        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span> 
            <span class="k">return</span> <span class="n">m</span><span class="p">;</span> 
        <span class="c1">// If x greater, ignore left half </span>
        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span> 
            <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>   
        <span class="c1">// If x is smaller, ignore right half </span>
        <span class="k">else</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> 
    <span class="p">}</span> 
  
    <span class="c1">// if we reach here, then element was </span>
    <span class="c1">// not present </span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>Above algorithm is useful when we have single instance of x in array. Suppose we have multiple instances in the array. In this case, we will be more interested in getting the bounds b/w which the values appear. In that case, we don’t need to exit the loop. we can iterate till we reach one of the bounds.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* if x is present in arr[] then returns the index of 
FIRST occurrence of x in arr[0..n-1], otherwise 
returns -1 */</span>
<span class="kt">int</span> <span class="nf">first</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Normal Binary Search Logic</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
 
        <span class="c1">// If arr[mid] is same as x, we</span>
        <span class="c1">// update res and move to the left</span>
        <span class="c1">// half.</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="cm">/* if x is present in arr[] then returns the index of 
LAST occurrence of x in arr[0..n-1], otherwise 
returns -1 */</span>
<span class="kt">int</span> <span class="nf">last</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Normal Binary Search Logic</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
 
        <span class="c1">// If arr[mid] is same as x, we</span>
        <span class="c1">// update res and move to the right</span>
        <span class="c1">// half.</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="recurrence-relations">Recurrence Relations</h2>

<p>These relations are useful for Divide and conquer. The recurrences are of the form.
\(T(n) = a · T(n/b) + f(n)\)</p>

<ol>
  <li>If \(f(n) = O(n^{log_b(a - e)})\) for some constant \(e &gt; 0\), then \(T(n) = Θ(n^{log_b a})\).</li>
  <li>If \(f(n) = Θ(n^{log_b a})\), then \(T(n) = Θ(n^{log_b a} lg n)\).</li>
  <li>If \(f(n) = O(n^{log_b a + e})\) for some constant \(e &gt; 0\), and if \(a.f(n/b) [&lt;=] c.f(n)\) for some \(c [&lt;] 1\), then \(T(n) = Θ(f(n))\).</li>
</ol>

<h2 id="fast-convolution">Fast Convolution</h2>

<p>Divide and conquer can be used here as well. We can solve these kind of problems using FFT in O(log n)</p>

<h2 id="parallelism">Parallelism</h2>

<p>Divide and conquer is used widely because it can enable parallel processing. But It may not be that easy.</p>

:ET